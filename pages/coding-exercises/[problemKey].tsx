import type { NextPage, GetStaticProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import axios from 'axios';
import { Resizable } from 're-resizable';
import { Button, Container } from 'semantic-ui-react';
import { getCodingExerciseData } from '../../utils/dataFetching';
import styles from '../../styles/practiceProblem.module.scss';
import { NextParsedUrlQuery } from 'next/dist/server/request-meta';
import { codingExerciseOverview } from '../../types';

const startingCode = `const sum = (num1, num2) => {
  // Add Code Below


  
  //Add Code Above
}`;

interface IParams extends NextParsedUrlQuery {
  problemKey: string;
}

interface PracticeProblemProps {
  codingExerciseData: codingExerciseOverview;
}

type testResult = {
  ancestorTitles: string[];
  failureMessages: string[];
  fullName: string | null;
  location: string | null;
  status: string | null;
  title: string | null;
};

type testcodeRouteResponse = {
  status: number;
  data: { testResults: testResult[] };
};

const PracticeProblem: NextPage<PracticeProblemProps> = ({ codingExerciseData }) => {
  const router = useRouter();

  const [userCode, setUserCode] = useState(startingCode);
  const [testResults, setTestResults] = useState([] as testResult[]);
  const [isFetchingData, setIsFetchingData] = useState(false);

  const handleCodeSubmit = () => {
    setIsFetchingData(true);

    axios
      .post('/api/testcode/problem-1', { userCode })
      .then(({ data }: testcodeRouteResponse) => {
        setTestResults(data.testResults);
        setIsFetchingData(false);
      })
      .catch((err) => {
        console.log(err);
        setIsFetchingData(false);
      });
  };

  return (
    <div>
      <Head>
        <title>Coding Practice 1</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.codingPracticeContainer}>
        <Resizable
          enable={{
            top: false,
            right: true,
            bottom: false,
            left: false,
            topRight: false,
            bottomRight: false,
            bottomLeft: false,
            topLeft: false,
          }}
          defaultSize={{ width: 400, height: 'auto' }}
          style={{ borderRight: '2px solid black', paddingLeft: '10px', paddingRight: '10px' }}
        >
          <h2>{codingExerciseData.title}</h2>
          <p>{codingExerciseData.instructions}</p>
          <h3>Test Criteria</h3>
          {isFetchingData && <p>Running Tests ...</p>}
          {testResults.map((result, index) => {
            return (
              <ul key={`test-result-${index}`}>
                {result.title} : {result.status}
              </ul>
            );
          })}
          <Button onClick={handleCodeSubmit}>Submit Code</Button>
        </Resizable>
        <div className={styles.codeContainer}>
          <CodeMirror
            value={codingExerciseData.startingCode}
            height="400px"
            extensions={[javascript({ jsx: true })]}
            onChange={(value, viewUpdate) => {
              console.log('value:', value);
              setUserCode(value);
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default PracticeProblem;

export const getStaticPaths = async () => {
  return {
    paths: [{ params: { problemKey: 'sum-two-ints' } }, { params: { problemKey: 'sort-array-ints' } }],
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const { problemKey } = context.params as IParams;
  const codingExerciseData = getCodingExerciseData(problemKey);

  return {
    props: {
      codingExerciseData,
    },
  };
};
