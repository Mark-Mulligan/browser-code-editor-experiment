import type { NextPage, GetStaticProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import axios from 'axios';
import { getCodingExerciseData } from '../../utils/dataFetching';
import styles from '../../styles/practiceProblem.module.scss';
import { NextParsedUrlQuery } from 'next/dist/server/request-meta';
import { codingExerciseOverview, testResult } from '../../types';
import TestInfoPanel from '../../components/TestInfoPanel';

interface IParams extends NextParsedUrlQuery {
  problemKey: string;
}

interface PracticeProblemProps {
  codingExerciseData: codingExerciseOverview;
}

type testcodeRouteResponse = {
  status: number;
  data: { testResults: testResult[] };
};

const PracticeProblem: NextPage<PracticeProblemProps> = ({ codingExerciseData }) => {
  const router = useRouter();

  const [userCode, setUserCode] = useState(codingExerciseData.startingCode);
  const [testResults, setTestResults] = useState([] as testResult[]);
  const [isFetchingData, setIsFetchingData] = useState(false);

  const handleCodeSubmit = () => {
    setIsFetchingData(true);

    axios
      .post(`/api/testcode/${router.query.problemKey}`, { userCode })
      .then(({ data }: testcodeRouteResponse) => {
        setTestResults(data.testResults);
        setIsFetchingData(false);
      })
      .catch((err) => {
        console.log(err);
        setIsFetchingData(false);
      });
  };

  return (
    <div>
      <Head>
        <title>Coding Practice 1</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.codingPracticeContainer}>
        <TestInfoPanel
          codingExerciseOverview={codingExerciseData}
          testResults={testResults}
          isRunningTests={isFetchingData}
          handleCodeSubmit={handleCodeSubmit}
        />
        <div className={styles.codeContainer}>
          <CodeMirror
            value={userCode}
            height="auto"
            extensions={[javascript({ jsx: true })]}
            onChange={(value, viewUpdate) => {
              setUserCode(value);
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default PracticeProblem;

export const getStaticPaths = async () => {
  return {
    paths: [{ params: { problemKey: 'sum-two-ints' } }, { params: { problemKey: 'sort-array-ints' } }],
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const { problemKey } = context.params as IParams;
  const codingExerciseData = getCodingExerciseData(problemKey);

  return {
    props: {
      codingExerciseData,
    },
  };
};
